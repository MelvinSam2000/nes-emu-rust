extern crate rand;

use crate::nes::Nes;
use crate::busppu;

pub struct Ppu {
    oam: [u8; 256],
    data_buffer: u8,
}

impl Ppu {

    pub fn new() -> Self {
        return Self {
            oam: [0; 256],
            data_buffer: 0x00,
        }
    }
}

pub static _PALETTE_TO_RGB: [(u8,u8,u8); 64] = [
   (0x80, 0x80, 0x80), (0x00, 0x3D, 0xA6), (0x00, 0x12, 0xB0), (0x44, 0x00, 0x96), (0xA1, 0x00, 0x5E),
   (0xC7, 0x00, 0x28), (0xBA, 0x06, 0x00), (0x8C, 0x17, 0x00), (0x5C, 0x2F, 0x00), (0x10, 0x45, 0x00),
   (0x05, 0x4A, 0x00), (0x00, 0x47, 0x2E), (0x00, 0x41, 0x66), (0x00, 0x00, 0x00), (0x05, 0x05, 0x05),
   (0x05, 0x05, 0x05), (0xC7, 0xC7, 0xC7), (0x00, 0x77, 0xFF), (0x21, 0x55, 0xFF), (0x82, 0x37, 0xFA),
   (0xEB, 0x2F, 0xB5), (0xFF, 0x29, 0x50), (0xFF, 0x22, 0x00), (0xD6, 0x32, 0x00), (0xC4, 0x62, 0x00),
   (0x35, 0x80, 0x00), (0x05, 0x8F, 0x00), (0x00, 0x8A, 0x55), (0x00, 0x99, 0xCC), (0x21, 0x21, 0x21),
   (0x09, 0x09, 0x09), (0x09, 0x09, 0x09), (0xFF, 0xFF, 0xFF), (0x0F, 0xD7, 0xFF), (0x69, 0xA2, 0xFF),
   (0xD4, 0x80, 0xFF), (0xFF, 0x45, 0xF3), (0xFF, 0x61, 0x8B), (0xFF, 0x88, 0x33), (0xFF, 0x9C, 0x12),
   (0xFA, 0xBC, 0x20), (0x9F, 0xE3, 0x0E), (0x2B, 0xF0, 0x35), (0x0C, 0xF0, 0xA4), (0x05, 0xFB, 0xFF),
   (0x5E, 0x5E, 0x5E), (0x0D, 0x0D, 0x0D), (0x0D, 0x0D, 0x0D), (0xFF, 0xFF, 0xFF), (0xA6, 0xFC, 0xFF),
   (0xB3, 0xEC, 0xFF), (0xDA, 0xAB, 0xEB), (0xFF, 0xA8, 0xF9), (0xFF, 0xAB, 0xB3), (0xFF, 0xD2, 0xB0),
   (0xFF, 0xEF, 0xA6), (0xFF, 0xF7, 0x9C), (0xD7, 0xE8, 0x95), (0xA6, 0xED, 0xAF), (0xA2, 0xF2, 0xDA),
   (0x99, 0xFF, 0xFC), (0xDD, 0xDD, 0xDD), (0x11, 0x11, 0x11), (0x11, 0x11, 0x11)
];


const PPUCTRL: u16 = 0x2000;
const PPUMASK: u16 = 0x2001;
const PPUSTATUS: u16 = 0x2002;
const OAMADDR: u16 = 0x2003;
const OAMDATA: u16 = 0x2004;
const PPUSCROLL: u16 = 0x2005;
const PPUADDR: u16 = 0x2006;
const PPUDATA: u16 = 0x2007;


pub fn clock(nes: &mut Nes) {
    for i in 0..240 {
        for j in 0..255 {
            nes.screen[i][j] = if rand::random() { (255, 255, 255) } else { (0, 0, 0) };
        }
    }
}

pub fn read(nes: &mut Nes, addr: u16) -> u8 {
    return busppu::read(nes, addr);
}

pub fn write(nes: &mut Nes, addr: u16, data: u8) {
    busppu::write(nes, addr, data);
}

pub fn read_ppu_reg(nes: &mut Nes, addr: u16) -> u8 {
    match addr {
        PPUCTRL | PPUMASK | PPUSCROLL => {
            // these registers are write only
            return 0x00;
        },
        PPUSTATUS => {

        },
        OAMADDR => {

        },
        OAMDATA => {

        },
        PPUADDR => {

        },
        PPUDATA => {

        }
        _ => {
            return 0x00;
        }
    }
    return 0x00;
}

pub fn write_ppu_reg(nes: &mut Nes, addr: u16, data: u8) {

}