use crate::nes::Nes;
use crate::cpu::addressing;
use crate::cpu::instructions;

pub struct DecodedOpcode {
    pub cycles: u8,
    pub addr_mode: fn(&mut Nes),
    pub instruction: fn(&mut Nes),
}

pub fn decode(opcode: u8) -> DecodedOpcode {
    match opcode {

        0x00 => wr(7, addressing::imp, instructions::brk),
        0x01 => wr(6, addressing::idx, instructions::ora),
        0x05 => wr(3, addressing::zpg, instructions::ora),
        0x06 => wr(5, addressing::zpg, instructions::asl),
        0x08 => wr(3, addressing::imp, instructions::php),
        0x09 => wr(2, addressing::imm, instructions::ora),
        0x0a => wr(2, addressing::imp, instructions::asl),
        0x0d => wr(4, addressing::abs, instructions::ora),
        0x0e => wr(6, addressing::abs, instructions::asl),

        0x10 => wr(2, addressing::rel, instructions::bpl),
        0x11 => wr(5, addressing::idy, instructions::ora),
        0x15 => wr(4, addressing::zpx, instructions::ora),
        0x16 => wr(6, addressing::zpx, instructions::asl),
        0x18 => wr(2, addressing::imp, instructions::clc),
        0x19 => wr(4, addressing::aby, instructions::ora),
        0x1d => wr(4, addressing::abx, instructions::ora),
        0x1e => wr(7, addressing::abx, instructions::asl),

        0x20 => wr(6, addressing::abs, instructions::jsr),
        0x21 => wr(6, addressing::idx, instructions::and),
        0x24 => wr(3, addressing::zpg, instructions::bit),
        0x25 => wr(3, addressing::zpg, instructions::and),
        0x26 => wr(5, addressing::zpg, instructions::rol),
        0x28 => wr(4, addressing::imp, instructions::plp),
        0x29 => wr(2, addressing::imm, instructions::and),
        0x2a => wr(2, addressing::imp, instructions::rol),
        0x2c => wr(4, addressing::abs, instructions::bit),
        0x2d => wr(4, addressing::abs, instructions::and),
        0x2e => wr(6, addressing::abs, instructions::rol),
        
        0x30 => wr(2, addressing::rel, instructions::bmi),
        0x31 => wr(5, addressing::idy, instructions::and),
        0x35 => wr(4, addressing::zpx, instructions::and),
        0x36 => wr(6, addressing::zpx, instructions::rol),
        0x38 => wr(2, addressing::imp, instructions::sec),
        0x39 => wr(4, addressing::aby, instructions::and),
        0x3d => wr(4, addressing::abx, instructions::and),
        0x3e => wr(7, addressing::abx, instructions::rol),
        
        0x40 => wr(6, addressing::imp, instructions::rti),
        0x41 => wr(6, addressing::idx, instructions::eor),
        0x45 => wr(3, addressing::zpg, instructions::eor),
        0x46 => wr(5, addressing::zpg, instructions::lsr),
        0x48 => wr(3, addressing::imp, instructions::pha),
        0x49 => wr(2, addressing::imm, instructions::eor),
        0x4a => wr(2, addressing::imp, instructions::lsr),
        0x4c => wr(3, addressing::abs, instructions::jmp),
        0x4d => wr(4, addressing::abs, instructions::eor),
        0x4e => wr(6, addressing::abs, instructions::lsr),
        
        0x50 => wr(2, addressing::rel, instructions::bvc),
        0x51 => wr(5, addressing::idy, instructions::eor),
        0x55 => wr(4, addressing::zpx, instructions::eor),
        0x56 => wr(6, addressing::zpx, instructions::lsr),
        0x58 => wr(2, addressing::imp, instructions::cli),
        0x59 => wr(4, addressing::aby, instructions::eor),
        0x5d => wr(4, addressing::abx, instructions::eor),
        0x5e => wr(7, addressing::abx, instructions::lsr),

        0x60 => wr(6, addressing::imp, instructions::rts),
        0x61 => wr(6, addressing::idx, instructions::adc),
        0x65 => wr(3, addressing::zpg, instructions::adc),
        0x66 => wr(5, addressing::zpg, instructions::ror),
        0x68 => wr(4, addressing::imp, instructions::pla),
        0x69 => wr(2, addressing::imm, instructions::adc),
        0x6a => wr(2, addressing::imp, instructions::ror),
        0x6c => wr(6, addressing::ind, instructions::jmp),
        0x6d => wr(4, addressing::abs, instructions::adc),
        0x6e => wr(6, addressing::abs, instructions::ror),

        0x70 => wr(2, addressing::rel, instructions::bvs),
        0x71 => wr(5, addressing::idy, instructions::adc),
        0x75 => wr(4, addressing::zpx, instructions::adc),
        0x76 => wr(6, addressing::zpx, instructions::ror),
        0x78 => wr(2, addressing::imp, instructions::sei),
        0x79 => wr(4, addressing::aby, instructions::adc),
        0x7d => wr(4, addressing::abx, instructions::adc),
        0x7e => wr(7, addressing::abx, instructions::ror),

        0x81 => wr(6, addressing::idx, instructions::sta),
        0x84 => wr(3, addressing::zpg, instructions::sty),
        0x85 => wr(3, addressing::zpg, instructions::sta),
        0x86 => wr(3, addressing::zpg, instructions::stx),
        0x88 => wr(2, addressing::imp, instructions::dey),
        0x8a => wr(2, addressing::imp, instructions::txa),
        0x8c => wr(4, addressing::abs, instructions::sty),
        0x8d => wr(4, addressing::abs, instructions::sta),
        0x8e => wr(4, addressing::abs, instructions::stx),

        0x90 => wr(2, addressing::rel, instructions::bcc),
        0x91 => wr(6, addressing::idy, instructions::sta),
        0x94 => wr(4, addressing::zpx, instructions::sty),
        0x95 => wr(4, addressing::zpx, instructions::sta),
        0x96 => wr(4, addressing::zpy, instructions::stx),
        0x98 => wr(2, addressing::imp, instructions::tya),
        0x99 => wr(5, addressing::aby, instructions::sta),
        0x9a => wr(2, addressing::imp, instructions::txs),
        0x9d => wr(5, addressing::abx, instructions::sta),

        0xa0 => wr(2, addressing::imm, instructions::ldy),
        0xa1 => wr(6, addressing::idx, instructions::lda),
        0xa2 => wr(2, addressing::imm, instructions::ldx),
        0xa4 => wr(3, addressing::zpg, instructions::ldy),
        0xa5 => wr(3, addressing::zpg, instructions::lda),
        0xa6 => wr(3, addressing::zpg, instructions::ldx),
        0xa8 => wr(2, addressing::imp, instructions::tay),
        0xa9 => wr(2, addressing::imm, instructions::lda),
        0xaa => wr(2, addressing::imp, instructions::tax),
        0xac => wr(4, addressing::abs, instructions::ldy),
        0xad => wr(4, addressing::abs, instructions::lda),
        0xae => wr(4, addressing::abs, instructions::ldx),

        0xb0 => wr(2, addressing::rel, instructions::bcs),
        0xb1 => wr(5, addressing::idy, instructions::lda),
        0xb4 => wr(4, addressing::zpx, instructions::ldy),
        0xb5 => wr(4, addressing::zpx, instructions::lda),
        0xb6 => wr(4, addressing::zpy, instructions::ldx),
        0xb8 => wr(2, addressing::imp, instructions::clv),
        0xb9 => wr(4, addressing::aby, instructions::lda),
        0xba => wr(2, addressing::imp, instructions::tsx),
        0xbc => wr(4, addressing::abx, instructions::ldy),
        0xbd => wr(4, addressing::abx, instructions::lda),
        0xbe => wr(4, addressing::aby, instructions::ldx),

        0xc0 => wr(2, addressing::imm, instructions::cpy),
        0xc1 => wr(6, addressing::idx, instructions::cmp),
        0xc4 => wr(3, addressing::zpg, instructions::cpy),
        0xc5 => wr(3, addressing::zpg, instructions::cmp),
        0xc6 => wr(5, addressing::zpg, instructions::dec),
        0xc8 => wr(2, addressing::imp, instructions::iny),
        0xc9 => wr(2, addressing::imm, instructions::cmp),
        0xca => wr(2, addressing::imp, instructions::dex),
        0xcc => wr(4, addressing::abs, instructions::cpy),
        0xcd => wr(4, addressing::abs, instructions::cmp),
        0xce => wr(6, addressing::abs, instructions::dec),

        0xd0 => wr(2, addressing::rel, instructions::bne),
        0xd1 => wr(5, addressing::idy, instructions::cmp),
        0xd5 => wr(4, addressing::zpx, instructions::cmp),
        0xd6 => wr(6, addressing::zpx, instructions::dec),
        0xd8 => wr(2, addressing::imp, instructions::cld),
        0xd9 => wr(4, addressing::aby, instructions::cmp),
        0xdd => wr(4, addressing::abx, instructions::cmp),
        0xde => wr(7, addressing::abx, instructions::dec),

        0xe0 => wr(2, addressing::imm, instructions::cpx),
        0xe1 => wr(6, addressing::idx, instructions::sbc),
        0xe4 => wr(3, addressing::zpg, instructions::cpx),
        0xe5 => wr(3, addressing::zpg, instructions::sbc),
        0xe6 => wr(5, addressing::zpg, instructions::inc),
        0xe8 => wr(2, addressing::imp, instructions::inx),
        0xe9 => wr(2, addressing::imm, instructions::sbc),
        0xea => wr(2, addressing::imp, instructions::nop),
        0xec => wr(4, addressing::abs, instructions::cpx),
        0xed => wr(4, addressing::abs, instructions::sbc),
        0xee => wr(6, addressing::abs, instructions::inc),

        0xf0 => wr(2, addressing::rel, instructions::beq),
        0xf1 => wr(5, addressing::idy, instructions::sbc),
        0xf5 => wr(4, addressing::zpx, instructions::sbc),
        0xf6 => wr(6, addressing::zpx, instructions::inc),
        0xf8 => wr(2, addressing::imp, instructions::sed),
        0xf9 => wr(4, addressing::aby, instructions::sbc),
        0xfd => wr(4, addressing::abx, instructions::sbc),
        0xfe => wr(7, addressing::abx, instructions::inc),

        _ => wr(1, addressing::xxx, instructions::xxx)
    }
}


// wrapper to remove function overhead from decode table
fn wr(cycles: u8, addr_mode: fn(&mut Nes), instruction: fn(&mut Nes)) -> DecodedOpcode {
    return DecodedOpcode {
        cycles, addr_mode, instruction
    }
}